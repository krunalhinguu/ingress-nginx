name: Check Upstream Release and Create Issue

on:
  push:
    branches:
      - automation-workflow # Runs on every commit to the automation-workflow branch
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install @octokit/rest jq

      - name: Check for new release
        id: check_release
        run: |
          echo "UPSTREAM_REPO_OWNER=kubernetes" >> $GITHUB_ENV
          echo "UPSTREAM_REPO_NAME=ingress-nginx" >> $GITHUB_ENV
          echo "FORKED_REPO_OWNER=rancher" >> $GITHUB_ENV
          echo "FORKED_REPO_NAME=ingress-nginx" >> $GITHUB_ENV
          echo "ISSUE_REPO_OWNER=rancher" >> $GITHUB_ENV
          echo "ISSUE_REPO_NAME=rancher" >> $GITHUB_ENV

          latest_upstream_release=$(curl -s https://api.github.com/repos/kubernetes/ingress-nginx/releases | jq -r '[.[] | select(.tag_name | startswith("controller"))][0].tag_name')

          latest_forked_release=$(curl -s https://api.github.com/repos/rancher/ingress-nginx/releases | jq -r '[.[] | select(.tag_name)][0].tag_name')

          if [ -z "$latest_upstream_release" ] || [ -z "$latest_forked_release" ]; then
            echo "Error: Could not fetch the release information."
            exit 1
          fi

          latest_upstream_version=$(echo $latest_upstream_release | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          latest_forked_version=$(echo $latest_forked_release | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

          echo $latest_upstream_version
          echo $latest_forked_version

          if [ -z "$latest_upstream_version" ] || [ -z "$latest_forked_version" ]; then
            echo "Error: Could not extract version numbers."
            exit 1
          fi

          # Compare the versions
          if [ "$(printf '%s\n' "$latest_forked_version" "$latest_upstream_version" | sort -V | head -n1)" != "$latest_upstream_version" ]; then
            new_release="true"
            echo "new_release=true" >> $GITHUB_ENV
            echo "latest_upstream_release=$latest_upstream_release" >> $GITHUB_ENV
          else
            echo "new_release=false" >> $GITHUB_ENV
          fi

          echo $new_release 

      - name: Create issue
        if: env.new_release == 'true'
        env:  
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_title="Bump ingress-nginx versions ${{ env.latest_upstream_release }}"
          issue_body=$(cat .github/ISSUE_TEMPLATE/release-note.md | sed "s/{{latest_upstream_release}}/${{ env.latest_upstream_release }}/g")

          # Create the issue and capture the URL
          issue_url=$(gh issue create --title "Bump ingress-nginx versions ${{ env.latest_upstream_release }}" \
          --body "$(cat .github/ISSUE_TEMPLATE/release-note.md | sed "s/{{latest_upstream_release}}/${{ env.latest_upstream_release }}/g")" \
          --repo "krunalhinguu/ingress-nginx" \
          --json url | jq -r .url)

          # Store the issue URL as a GitHub environment variable
          echo "issue_url=$issue_url" >> $GITHUB_ENV


      - name: Create new branch, cherry-pick commits, and raise PR
        if: env.new_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch_name="bump-${{ env.latest_upstream_release }}"
          upstream_repo_url="https://github.com/kubernetes/ingress-nginx.git"

          git fetch origin
          
          # Clone the upstream repository
          git clone $upstream_repo_url
          cd ingress-nginx

          # Checkout the specific release tag
          git checkout $latest_upstream_release

          # Create a new branch for the changes
          git switch -c $branch_name

          # Push the new branch to the forked repository
          git remote set-url origin https://github.com/krunalhinguu/ingress-nginx.git
          git push origin $branch_name

          echo "$GH_TOKEN" | gh auth login --with-token

          # Create a PR from the new branch to main
          gh pr create --base main --head $branch_name --title "Bump to $latest_upstream_release --body "Cherry-pick changes from $latest_upstream_release\n\nRelated Issue: $issue_url"        
          